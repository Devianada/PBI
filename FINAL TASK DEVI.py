# -*- coding: utf-8 -*-
"""Untitled5.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-Xsd3Yueso7RL7j1E6tNioDtOn3vLmoP
"""

import pandas as pd
import numpy as np

import seaborn as sns
import matplotlib.pyplot as plt

from sklearn.metrics import mean_absolute_error, mean_squared_error
from sklearn import preprocessing
from sklearn.cluster import KMeans
from sklearn.metrics import silhouette_score

from statsmodels.tsa.seasonal import seasonal_decompose
from statsmodels.tsa.holtwinters import SimpleExpSmoothing, Holt
from statsmodels.tsa.arima.model import ARIMA
from pandas.plotting import autocorrelation_plot

import warnings
warnings.filterwarnings('ignore')

import pandas as pd

# Membaca data CSV
customer_data = pd.read_csv("Customer.csv")
product_data = pd.read_csv("Product.csv")
transaction_data = pd.read_csv("Transaction.csv")
store_data = pd.read_csv("Store.csv")

df_customer = pd.read_csv(r'/content/Customer.csv', delimiter=';')
df_product = pd.read_csv(r'/content/Product.csv', delimiter=';')
df_transaction = pd.read_csv(r'/content/Transaction.csv', delimiter=';')
df_store = pd.read_csv(r'/content/Store.csv', delimiter=';')

df_customer.shape, df_product.shape, df_store.shape, df_transaction.shape

"""DATA CLEANSING"""

df_customer.head()

df_product.head()

df_store.head()

df_transaction.head()

#data cleansing df customer
df_customer['Income'] = df_customer['Income'].str.replace(',', '.', regex=True).astype(float)

#data cleansing df store
df_store['Latitude'] = df_store['Latitude'].replace(',', '.', regex=True).astype(float)
df_store['Longitude'] = df_store['Longitude'].str.replace(',', '.', regex=True).astype(float)

#data cleansing df transaction
df_transaction['Date'] = pd.to_datetime(df_transaction['Date'])

print(df_store['Latitude'].dtype)
print(df_store['Longitude'].dtype)

"""Gabungkan semua data"""

df_merge = pd.merge(df_transaction, df_customer, on=['CustomerID'])
df_merge = pd.merge(df_merge, df_product.drop(columns=['Price']), on=['ProductID'])
df_merge = pd.merge(df_merge, df_store, on=['StoreID'])

df_merge.head()

"""model machine learning regresi"""

df_regresi = df_merge.groupby(['Date']).agg({
    'Qty' : 'sum'
}).reset_index()

df_regresi

decomposed = seasonal_decompose(df_regresi.set_index('Date'))

plt.figure(figsize=(8, 8))

plt.subplot(311)
decomposed.trend.plot(ax=plt.gca())
plt.title('Trend')
plt.subplot(312)
decomposed.seasonal.plot(ax=plt.gca())
plt.title('Seasonality')
plt.subplot(313)
decomposed.resid.plot(ax=plt.gca())
plt.title('Residuals')

plt.tight_layout()

"""check stationarity data"""

cut_off = round(df_regresi.shape[0] * 0.9)
df_train = df_regresi.iloc[:cut_off]
df_test = df_regresi.iloc[cut_off:].reset_index(drop=True)
df_train.shape, df_test.shape

df_train

df_test

plt.figure(figsize=(20, 5))
sns.lineplot(data=df_train, x=df_train['Date'], y=df_train['Qty']);
sns.lineplot(data=df_test, x=df_test['Date'], y=df_test['Qty'])

autocorrelation_plot(df_regresi['Qty']);

def rmse(y_actual, y_pred):
    """
    function to calculate RMSE
    """

    print(f'RMSE value {mean_squared_error(y_actual, y_pred)**0.5}')

def eval(y_actual, y_pred):
    """
    function to eval machine learning modelling
    """

    rmse(y_actual, y_pred)
    print(f'MAE value {mean_absolute_error(y_actual, y_pred)}')

#ARIMA
df_train = df_train.set_index('Date')
df_test = df_test.set_index('Date')

y = df_train['Qty']

ARIMAmodel = ARIMA(y, order = (40, 2, 1))
ARIMAmodel = ARIMAmodel.fit()

y_pred = ARIMAmodel.get_forecast(len(df_test))

y_pred_df = y_pred.conf_int()
y_pred_df['predictions'] = ARIMAmodel.predict(start =y_pred_df.index[0], end =y_pred_df.index[-1])
y_pred_df.index = df_test.index
y_pred_out = y_pred_df['predictions']
eval(df_test['Qty'], y_pred_out)

plt.figure(figsize=(20, 5))
plt.plot(df_train['Qty'])
plt.plot(df_test['Qty'], color='red')
plt.plot(y_pred_out, color='black', label = 'ARIMA Predictions')
plt.legend()

"""Clustering"""

df_merge.head()

#identifikasi kolom yg redundant/ korelasi tinggi
df_merge.corr()

df_cluster = df_merge.groupby(['CustomerID']).agg({
    'TransactionID' : 'count',
    'Qty' : 'sum'
}).reset_index()

df_cluster.head()

df_cluster

data_cluster = df_cluster.drop(columns=['CustomerID'])

data_cluster_normalize = preprocessing.normalize(data_cluster)

data_cluster_normalize

K = range(2, 8)
fits = []
score = []

for k in K:
      model =KMeans(n_clusters = k, random_state = 0, n_init='auto').fit(data_cluster_normalize)

      fits.append(model)

      score.append(silhouette_score(data_cluster_normalize, model.labels_, metric='euclidean'))

#pilih 4 cluster
sns.lineplot(x = K, y = score);

fits[1]

df_cluster['cluster_label'] = fits[1].labels_

df_cluster.groupby(['cluster_label']).agg({
    'CustomerID' : 'count',
    'TransactionID' : 'mean',
    'Qty' : 'mean',
})

#cluster 2 => memiliki jumlah rata-rata CustomerID yang sedang (134) dan rata-rata TransactionID serta Qty yang cukup tinggi.
#cluster 1 => memiliki jumlah rata-rata CustomerID yang lebih rendah (102) dibandingkan dengan Cluster 0 dan TransactionID serta Qty yang lebih rendah lagi
#cluster 0 => memiliki jumlah rata-rata CustomerID yang tinggi (211) dan rata-rata TransactionID serta Qty yang cukup tinggi juga.